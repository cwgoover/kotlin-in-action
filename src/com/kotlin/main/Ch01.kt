package com.kotlin.main

import java.util.*

// What and why
fun main(args: Array<String>) {
    val persons = listOf(Person("Alice"),
        Person("Bob", age = 29))    //1. named argument

    // The Elvis operator ?: returns zero if age is null.
    val oldest = persons.maxBy { it.age ?: 0 }  //2. lambda expression; "elvis" operator
    println("The oldest is : $oldest")      //3. string template


    val rect = Rectangle(40, 41)
    println("Try to print: ${rect.createRandomRectangle().isSquare}")

    println(Color.BLUE.rgb())
}


fun valTest(a: Int, b: Int): String {
    // A val variable must be initialized exactly once during the execution of
    // the block where it’s defined.
    val message: String
    if (isMax(a, b)) {
        message = "Success"
    } else {
        message = "Failed"
    }
    return message
}
fun isMax(a: Int, b: Int): Boolean {
    return a > b
}


// function with return type
fun max(a: Int, b: Int): Int {
    return if (a > b) a else b
}
//fun max(a: Int, b: Int) = if (a > b) a else b



// Variables
val yearsToComputer = 7.5e6     // 7.5*106=75000000.0



data class Person(val name: String,
                  val age: Int? = null) //4. nullable type(Int?); default value for argument




class Rectangle(private val height: Int, private val width: Int) {
    // The property isSquare doesn’t need a field to store its value.
    // It only has a custom getter with the implementation provided.
    val isSquare: Boolean

    get() {
        return height == width
    }

    fun createRandomRectangle(): Rectangle {
        val random = Random()
        return Rectangle(random.nextInt(), random.nextInt())
    }
}


//5. autogenerated 'toString'
// The oldest is : Person(name=Bob, age=29)

/**
 * val (from value)—Immutable reference.
 *      A variable declared with val can’t be reassigned after it’s initialized.
 *      It corresponds to a final variable in Java.
 * var (from variable)—Mutable reference.
 *      The value of such a variable can be changed.
 */
